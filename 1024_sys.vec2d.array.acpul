### 1024 sys.vec2d.array
vec2d.array.d.itemsize 2;
vec2d.array.d.size max*itemsize;
vec2d.array
{
 _;
 new
 {
   heap.alloc(d.a, d.size);
   d.n:=0;
 };
 clear
 {
  d.n:=0;
  #watch(d.a);
 };
 add
 {
  if(d.n<d.max)
  {
   set2(u0, d.a, d.n*d.itemsize, _0, _1);
   d.n+=1;
  };
 };
 count
 {
  d.n;
 };
 at.index
 {
  if(_0<d.n)
  {
   _1:=get(u0, d.a, _0*d.itemsize);
   _2:=get(u0, d.a, _0*d.itemsize+1);
  };
 };
 at.last
 {
  at.index(d.n-1, _0, _1);
 };
 update
 {
  if(_0<d.n)
  {
   set2(u0, d.a, _0*d.itemsize, _1, _2);
  };
 };
 for.each
 # fn -> fn(index)
 {
  i b0;
  x b1;
  y b2;
  fn _0(_1);

  i:=0;
  while(i<d.n)
  {
#   at.index(x, y);
   fn(_0, i);
   i+=1;
  };

  a # GET->UPDATE
  # fn -> fn(index, x, y):x,y
  {
   i:=0;
   while(i<d.n)
   {
    at.index(i, x, y);
    _0(i, x, y);
    update(i, x, y);
    i+=1;
   };
  };
  b # UPDATE
  # fn -> fn(index, x, y):x,y
  {
   i:=0;
   while(i<d.n)
   {
    _0(i, x, y);
    update(i, x, y);
    i+=1;
   };
  };
 };
};
