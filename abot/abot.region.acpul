### 1510 abot.region

r0:=k==0;

draw(r0, 1511);

_ @1010;
_ @sys.abot;
_ @sys.node;

vw 1024; vh 768;
x:=-vw/2;
y:=-vh/2;

REGION.TEXTURE u20;

REGION.VIDEO 1512;
node.new.this.ex(r0, REGION.VIDEO, 0);

k:=1;


abot.regions {
 _ @1010;
 _ @sys.obj;

 o {
  wnd 0;
  ctrl 1;
  view 2;
  video 6;
  src 10;
  frame 14;
 };
 max 18;

 create map.new(u0, max, max);
 clear obj.clear(u0, _0);

 region {
  query.window {
   it.key.new(u0, _0,0, _1*1000+_2);
   it.dma(u0, 0, _0,0);
   dma.set2(u0, 0, o.wnd, _1,_2);
  };
  view {
   dma.set4(u0, 0, o.view, _0,_1, _2,_3);
   g dma.get4(u0, 0, o.view);
  };
  video 
   dma.set4(u0, 0, o.video, _0,_1, _2,_3);
  src {
   dma.set4(u0, 0, o.src, _0,_1, _2,_3);
   g dma.get4(u0, 0, o.src);
  };
  frame {
   dma.set4(u0, 0, o.frame, _0,_1, _2,_3);
   g dma.get4(u0, 0, o.frame);
  };
 };

};

region abot.regions.region;

#region.window.control
# define region:
# <window> <control> 
rn.xcode.panel.view 0;
rn.xcode.panel.buttons 1;
rn.xcode.editor 2;
rn.xcode.vars 3;
rn.xcode.console 4;
rn.xcode.build.status 5;
rn.xcode.simulator 6;

wnd.xcode.acpubot 1;
wnd.xcode.ipixel 2;


if (r0)
{
 r7:=if(r0, abot.regions.create(), r7);

 abot.regions.clear(r7);

# ws wnd.xcode.acpubot;
 ws wnd.xcode.ipixel;
 region.query.window(r7, ws, rn.xcode.panel.view);
 f 0+(1024-60)/1024;
 region.view(0+30,0, 100*f,100);
 #region.video(100+sin(t)*100,0, 100,100);
 region.video(0,0, 100,100);
# region.src(0,0, 100,100);
 region.src(100+cos(t)*100,0, 100,100);
 region.frame(0,0, 600,100);

 region.query.window(r7, ws, rn.xcode.console);
 region.view(100*f+30,0, 200*f,100);
 region.video(100,0, 200,100);
 region.src(0,0, 200/2,100/2);
 region.frame(1000,800, 200,100);

 #if (mod(t, 1) < 0.5) {
 region.query.window(r7, ws, rn.xcode.editor);
 region.view(0+30,100, 500*f,500);
 region.video(0,100, 1000,600);
 region.src(0,0, 800,600);
# region.frame(440,70,1000,680);
 region.frame(0,70,1000,680);

 region.src(170,0, 350,200);
 
 #};

 abot.sync.regions(u0, r7);
};

t+=dt;

_ @1010;
_ @sys.obj;

r6:=if(r0, map.new(u0, 1, 1), r6);

# clear
l0:=it.begin(u0, r6,0);
while(l0>-1) {
 it.dma(u0, 0, r6,0);
 dma.set(u0, 0, 0, 0);
 l0:=it.next(u0, r6,l0);
};

# sync regions
l0:=it.begin(u0, r7,0);
while(l0>-1) {
 l1:=it.map.get.key(u0, r7,0);

 it.key.new(u0, r6,0, l1);
 it.dma(u0, 0, r6,0);
 l2:=dma.get(u0, 0, 0);
 l3:=if(l2==-1, 2, 1); # new or present
 dma.set(u0, 0, 0, l3);
# watch(l2);
# watch(l1);
 l0:=it.next(u0, r7,l0);
};

# sync nodes
l0:=it.begin(u0, r6,0);
while(l0>-1) {
 it.dma(u0, 0, r6,0);
 l1:=dma.get(u0, 0, 0);
 if (l1==2) {
  REGION.NODE 1520;
  node.new.this.ex4(u0, REGION.NODE, r7, it.map.get.key(u0, r6,0), r6, 0);
 };
# watch(l1);
# watch(it.map.get.key(u0, r6,0));
 l0:=it.next(u0, r6,l0);
};


# removed [
# ## 1516 abot.region.data.windows
# #<wnd> <prefix> <index>
# XCode ACPUBot 0
# removed ]

### 1511 abot.region.draw

color(u0, 0,0.5,0.5,0.5);
rect(u0, 6, 0,0, 1024,768);

# ---- ---- ---- ---- [
# ---- ---- ---- ---- ]

### 1512 abot.region.video

r0:=k==0;

draw(r0, 1513);

_ @1010;
_ @sys.node;

if (r0)
{
 r1:=node.ex.texture.create.fmt(r0, 1024,768, node.ex.texture.fmt.rgb565, 1);
 a @1510;
 a.REGION.TEXTURE:=r1;
};

r:=180;
x:=1024;
y:=768;

k:=1;

### 1513 abot.region.video.draw

_ @1010;
_ @sys.node;

tex0 r1;
gl node.ex.gl;
shader node.ex.shader;

_ @sys.abot;
abot.stream.render.texture(u0, 0, tex0);

shader.use(u0, 1514, 1515);
shader.uniform.texture(u0, 0, r1, 0);
shader.uniform.f1(u0, 1, 0.5+0.5*sin(l15*1));

bw 1024;
bh 768;
gl.rect(u0, +30,0, bw-60,bh);

# ---- ---- ---- ---- [
# ---- ---- ---- ---- ]

### 1514:S abot.region.video.vsh
 
attribute vec4 a_position;
attribute vec2 a_texCoord;

varying mediump vec2 v_texCoord;
varying mediump vec4 v_p;

void main()
{
   gl_Position = CC_MVPMatrix * a_position+vec4(sin(a_position.x*0.05)*0.0,0.0,0.0,0.0);

   v_texCoord = a_texCoord;
   v_p = gl_Position;
}

### 1515:S abot.region.video.fsh

#ifdef GL_ES
precision lowp float;
#endif

varying vec2 v_texCoord;

uniform sampler2D p0;

void main() 
{
//  gl_FragColor = texture2D(p0, v_texCoord);
  gl_FragColor = texture2D(p0, vec2(1.-v_texCoord.x, v_texCoord.y));
  
  gl_FragColor *= texture2D(p0, vec2(1.-v_texCoord.x, v_texCoord.y));

 float r = gl_FragColor.r;
 float g = gl_FragColor.r;
 float b = gl_FragColor.r;
  gl_FragColor = vec4(b*g,r*g-0.2,1.0-r*b,0.5);
}






