### 5300 test.text

r0:=k==0;

draw(r0, 5301);

# font [

_ @1010;
_ @sys.media;
_ @sys.obj;

font0 r3;
fchars r4;
fnt.load {
 font0:=media.ft.load.font(u0, 0, 1000,0,0);
};
if (r0) {
 fnt.load;

 fchars:=buffer.new(u0, 10000*3*4, 100000*3*4); # x,y,z [+ shape] ;
 buffer.add(u0, fchars, 1000*4, 100000*4); # char, texture, offs0,offs1

 buffer.dma(u0, 0, fchars,0);
 buffer.dma(u0, 1, fchars,1);

# media.ft.text.dma(u0, font0,200, S.test.text777, 0,1,-1);
# media.ft.text.dma(u0, font0,150, St.Patrick, 0,1,-1);
# media.ft.text.dma(u0, font0,165, o.ACPU.o, 0,1,-1);
 media.ft.text.dma(u0, font0,200, ACPU, 0,1,-1);

 _ @1010; _ @sys.llog; llog.b(Q.test.text); 
 llog.erase(u0, 0);
 llog.pv(Q.font0, font0); 
 llog.pv(Q.fchars, fchars); 
 llog.pv(Q.text.dma0.size, dma.size(u0, 0)); 
 llog.pv(Q.text.dma1.size, dma.size(u0, 1)); 
 llog.e();

 dma.off(u0, 0);
 dma.off(u0, 1);
};

# font ]
#s:=1;

k:=1;

### 5301 test.text.draw

color(u0, 0,1,0,0);
rect(u0, 6, 0,0, 100,100);
rect(u0, 6, 100,100, 100,100);
rect(u0, 6, 200,0, 100,100);

# font draw [

font0 r3;
fchars r4;

_ @1010;
_ @sys.node;
_ @sys.obj;

#node.ex.shader.use(u0, 10010020, 10010021);
node.ex.shader.use(u0, 5302, 5303);

buffer.dma(u0, 0, fchars,0);
buffer.dma(u0, 1, fchars,1);

offscount 1;
l1:=dma.get(u0, 1, offscount);

startitems 8;
itemsize 4;
offstexture 1;
l0:=dma.get(u0, 1, startitems+offstexture);
node.ex.shader.uniform.texture.name(u0, 0, l0, 0);
if (r0) {
 _ @1010; _ @sys.llog; llog.b(Q.test.text); llog.pv(Q.texture, l0); llog.e();
 _ @1010; _ @sys.llog; llog.b(Q.test.text); llog.pv(Q.count, l1); llog.e();
};

l2:=0;
while (l2 < l1) {
 # r0, i, dma,o,esize,stride,count, type,normalized
 a0 0; # verts
 a1 1; # texCoords
 dma0 0;
 eoffs 4*4*l2;
 node.ex.shader.attribute.dma(u0, a1, dma0,eoffs,  2,4,4, 0,0);
 node.ex.shader.attribute.dma(u0, a0, dma0,eoffs+2,2,4,4, 0,0);

 node.ex.gl.draw(u0, 6, 4);
 l2+=1;
};

dma.off(u0, 0);
dma.off(u0, 1);

# font draw ]

### 5302:S text.main.vsh

#define a_position a0
#define a_texCoord a1

attribute vec4 a_position;
attribute vec2 a_texCoord;

varying mediump vec2 v_texCoord;
 
void main()
{
  gl_Position = CC_MVPMatrix * a_position;
  v_texCoord = a_texCoord;
}

### 5303:S text.fill.vsh

varying vec2 v_texCoord;

uniform sampler2D p0;

void main()
{
  vec4 c = texture2D(p0, v_texCoord);
  c = c.a * vec4(0.3,1.,0.+sin(v_texCoord.x*2.),1.);
  gl_FragColor = c;
//  gl_FragColor = vec4(0.5);
}

### 5304:S text.eff0.fsh

//#define time 2.
//#define time CC_Time[3]
//uniform float CC_Time[2];
#define time CC_Time[3]/10.
//#define resolution vec2(500.0,250.)/vec2(1.)
#define mouse vec2(0.5)

#ifdef GL_ES
precision highp float;
#endif

//uniform float time;

//uniform vec2 resolution;

varying vec2 v_texCoord;
uniform sampler2D p0;

//uniform vec2 p1;
//#define resolution p1
//uniform vec2 p2;
//#define offset p2

//#define resolution vec2(50.0,70.)/vec2(1.)
#define resolution vec2(250.0,570.)/vec2(1.)
#define offset     vec2(0.,0.)

#define PI 90

void main( void ) {

    vec2 pp = gl_FragCoord.xy - offset;

    vec2 p = ( pp / resolution.xy ) - 0.; //nosaka vilnu atrašanas vietu, xy - horizontali vilni, yx - vertikali, 0.0 - centra/viduslinija
    vec2 p2 = ( pp / resolution.xy ) - 0.; //nosaka šautrinu atrašanas vietu, xy - horizontali vilni, yx - vertikali, 0.0 - centra/viduslinija
    
    // pirmais 0.5 - atrašanas vieta: <0.5 - zem viduslinijas, >0.5 - virs
    // otrais 0.5 - vilnu augstums
    // sin(100.0.. - vilnu platums
    // p.x vai p2.y - nosaka attieciga vektora virzienu/veidu, ja x, tad veidos vilnus, ja y, tad šautrinas
    // sin( 2.0.. - nosaka vilnu amplitudu - jo lielaks skaitlis, jo mazaka amplituda
    // p.x vai p2.x - nosaka amplitudas virzienu
    // 1. * pow(time, 0.9)*5. - nosaka vilnu atrumu
    float sx = 0.5 + 0.5 * sin( 1000.0 * p.x - 1. * pow(time, 0.5)*2.) * sin( 2.0 * p.x - 1. * pow(time, 0.9)*5.);
    float sx2 = 0.5 + 0.5 * sin( 1000.0 * p2.y - 1. * pow(time, 0.5)*2.) * sin( 2.0 * p2.x - 1. * pow(time, 0.9)*5.);
    
    // 1.0 -  nosaka vilna spilgtumu - ja mazaks skaitlis, tad vilnis sastav no punktiniem, ja lielaks, tad saplust linijas
    // 1000. - ari nosaka vilna spilgtumu, ja lielaks skaitlis, tad sastav no punktiem, ja mazaks, tad linijas
    float dy = 1.0/ ( 100. * abs(p.y - sx));
    float dy2 = 1.0/ ( 100. * abs(p2.y - sx2));
    
    // 2.  - nosaka fona gaišumu, jo lielaks skaitlis, jo gaišas fons
    // p.y vai p2.y - nosaka no kuras puses spides gaisma, ja y, tad no kreisa stura, ja x, tad no apakšas
    // 0. - nosaka krasu
    dy += 2./ (15. * length(p - vec2(p.y, 2.)));
    dy2 += 2./ (15. * length(p2 - vec2(p2.y, 2.)));
    
    // p.y vai p2.y + 0.3- nosaka no kuras puses veidosies krasu maina un kada toni ta bus
    // parejie parametri nosaka krasas spožumu, toni un virzienu
    vec4 pirmais = vec4( (p.y + 0.3) * dy , 0.9 * dy, dy, 1.1 );
    vec4 otrais = vec4( (p2.y + 0.3) * dy2 , 0.3 * dy2, dy2, 1.1 );
    
    vec4 o = (otrais + pirmais);
    //o = vec4(o.g*5.,o.b*2.,o.r*2.,1.);

    vec2 coord = v_texCoord;
    float dxx = 15.*(1./1./512.);
    float dyy = 10.*(1./1./512.);
//    coord = vec2(dxx*floor(v_texCoord.x/dxx),dyy*floor(v_texCoord.y/dyy)); 

    vec4 c = texture2D(p0, coord);
    if (c.a < 0.9) c.a = 0.;
//    o += vec4(0.3,1.,0.+sin(coord.x*2.),1.)*0.7;
//    o += vec4(0.3+sin(coord.x*20.+time*10.)*0.5,1.,0.,1.)*0.7;
    o += vec4(0.3+sin(coord.x*20.+time*10.)*0.5,0.5+sin((coord.x*10.+time)*10.)*0.4,1.,1.)*0.7;
    o=vec4(2.,0.5,0.0,1)*0.2*exp(o);
    o.b=0.5+cos(o.r/2.*3.14);
    o.g=o.r/2.;
    o = c.a * o;
    gl_FragColor = o;
}
