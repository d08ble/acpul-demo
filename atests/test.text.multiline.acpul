### 5350 test.text.multiline

r0:=k==0;

draw(r0, 5351);

_ @1010;
_ @sys.media;
_ @sys.obj;
_ @sys.llog;

dma0 0;
dma1 1;
dma2 2;
dma5 5;

document {
 
};

lines.vec {
 b0 l0;

 new {
  # -> o
  b0:=buffer.new(u0, 10000,1000000);
  buffer.dma(u0, dma5, b0,0);
  b0;
 };
 use {
  # o
  buffer.dma(u0, dma5, _0,0);
 };
 end {
  dma.off(u0, dma5);
 };

 select {
  # i, dma0,dma1
#  font0
#  font0size
  i _0;
  dma0 _1;
  dma1 _2;
  fchars b0;
  
  fchars:=dma.get(u0, dma5,i);

  llog.printv(r0, S.select.fchars, fchars);

  if (fchars>0) {
    buffer.dma(u0, dma0, fchars,0);
    buffer.dma(u0, dma1, fchars,1);
  };

  if (fchars<=0) {
   fchars:=buffer.new(u0, 10000*3*4, 100000*3*4); # x,y,z [+ shape] ;
   buffer.add(u0, fchars, 1000*4, 100000*4); # char, texture, offs0,offs1

   dma.set(u0, dma5,i, fchars);

   buffer.dma(u0, dma0, fchars,0);
   buffer.dma(u0, dma1, fchars,1);
  };
 };
};

font0 r3;
fnt.load {
 font0:=media.ft.load.font(u0, 0, 1000,0,0);
};

state {
 view {
  start.x r4;
  start.y r5;
  rows r6;
  cols r7;
  start.row u49; #150;
 };
};

lvec0 r2;

llog.begin(u0, S.test.text.multiline);
llog.erase(r0, 0);

if (r0) {
 fnt.load;

 state.view.rows:=20;
 state.view.cols:=50;

 lvec0:=lines.vec.new;
 lines.vec.use(lvec0);

 i:=0;
 while(i<state.view.rows) {
  lines.vec.select(i, dma0,dma1);

#  text S.TEST.TEXT;
  text MATRIX.MATRIX.MATRIX;
  media.ft.text.dma(u0, font0,50, text, dma0,dma1,-1);

  llog.printv(u0, S.select.i, i);
#  llog.printo(u0, S.dma0, 0, dma0,-1);
#  llog.printo(u0, S.dma1, 0, dma1,-1);
  i+=1;
 };
 lines.vec.end(lvec0);

};

# ide [

_ @sys.cpu;

src r1;

load.formula {
 # fid  
 fid _0;
 src:=cpu.get.formula.info.source(u0, fid, src);
# llog.printv(u0, S.formula.info.fid, fid);
# llog.printo(u0, S.formula.info.src, 0, src,-1);
};

update0 {

 lines.vec.use(lvec0);

 i:=0;
 while(i<state.view.rows) {
#  lines.vec.select(i, dma0,dma1);

#  buffer.dma(u0, dma2, src,i+state.view.start.row);

#  media.ft.text.dma(u0, font0,25, dma2, dma0,dma1,-1);
#  llog.printv(u0, S.select.i, i);
#  llog.printo(u0, S.font.dma0, 0, dma0,-1);
#  llog.printo(u0, S.font.dma1, 0, dma1,-1);
  i+=1;
 };
 lines.vec.end(lvec0);
};

if (r0) {
 load.formula(5351);
};
 update0;
#state.view.start.row = 100; #t; #100; #t/10;
# ide ]

llog.end(u0);

t+=dt;

k:=1;

### 5351 test.text.multiline.draw
color(u0, 0,0,1,1);
#rect(u0, 6, 0-1000,0-1000, 10000,10000);
rect(u0, 6, 0,0, 500,500);

_ @1010;
_ @sys.media;
_ @sys.obj;
_ @sys.node;
_ @sys.cpu;

options.info {
 dma0 0;
 dma1 1;
 b0 l0;
 b1 l1;
 b2 l2;
 #vsh 10018020;
 vsh 5352;
 #fsh 10018021;
 fsh 5353;
 texattr0 0;
 texunit0 0;
};

fid 5351;

 draw {
  # x,y, line
  fchars0 _0.fchars0;
  dma0 _0.dma0;
  dma1 _0.dma1;
  vsh _0.vsh;
  fsh _0.fsh;
  texattr0 _0.texattr0;
  texunit0 _0.texunit0;

  l0 _0.b0;
  l1 _0.b1;
  l2 _0.b2;

  x _1;
  y _2;

  line _3;

  shader node.ex.shader;
  
  shader.use(u0, vsh,fsh);

  uniform1 1;
  uniform2 2;

  shader.uniform.f2(u0, uniform1, x,y); 

  offscount 1;
  l1:=dma.get(u0, 1, offscount);

  startitems 8;
  itemsize 4;
  offstexture 1;
  l0:=dma.get(u0, 1, startitems+offstexture);
  shader.uniform.texture.name(u0, texattr0, l0, texunit0);
#  if (r0) {
#   _ @1010; _ @sys.llog; llog.b(Q.tmp.text); llog.pv(Q.texture, l0); llog.e();
#   _ @1010; _ @sys.llog; llog.b(Q.tmp.text); llog.pv(Q.count, l1); llog.e();
#  };
  shader.uniform.f1(u0, uniform2, 0); 
#     u49+=0.001;
#     u49:=0.5;

  render.chars0 {
   l2:=0;
   while (l2 < l1) {
    a0 0; # verts
    a1 1; # texCoords
    eoffs 4*4*l2;
    # r0, i, dma,o,esize,stride,count, type,normalized
    shader.attribute.dma(u0, a1, dma0,eoffs,  2,4,4, 0,0);
    shader.attribute.dma(u0, a0, dma0,eoffs+2,2,4,4, 0,0);

#  shader.uniform.f2(u0, uniform1, x,y+sin((l2+y*0.1+t*20)*20)*300); 
    shader.uniform.f2(u0, uniform1, x,y); 

    update.percent {

#     shader.uniform.f1(u0, uniform2, l2/l1); 

     col l2;
#     line 0; col 0; 
     l0:=cpu.get.formula.info.text.matrix.attribute(u0, fid, line,col, 2);
#     l0:=cpu.get.formula.info.text.matrix.attribute(u0, fid, line,col, 0);
#watch(l0);     
#     a cpu.source.attribute;
#if (l0>=0) {watch(l0);};

     l3:=0;
     if (l0==a.ident) {l3:=2.5;};
     if (l0==a.name) {l3:=1;};
     if (l0==a.number) {l3:=0.2;};
     l3:=l0;
#     l3:=u49;
#     l3:=l0;
#     l0:=if(l2<3,1,0);
# llog.printv(u0, S.formula.info.attr, l0);

     shader.uniform.f1(u0, uniform2, l3); 

#     shader.uniform.f1(u0, uniform2, l2/l1); 
    };

    update.percent;

    node.ex.gl.draw(u0, 6, 4);
    l2+=1;
   };
  };

  render.chars1.rects {
   color(u0, 0.5,0.5,0,0.5);
   l2:=0;
   while (l2 < l1) {
    char.info.sz 8;
    sz char.info.sz;
    rectoffs sz*(l2+1)+4;
    x0 d0; y0 d1; x1 d2; y1 d3;
    x0:=dma.get(u0, dma1,rectoffs+0);
    y0:=dma.get(u0, dma1,rectoffs+1);
    x1:=dma.get(u0, dma1,rectoffs+2);
    y1:=dma.get(u0, dma1,rectoffs+3);
    rect(u0, 6, x+x0,y+y0,x1-x0,y1-y0);
    l2+=1;
   };
  };

  render.chars0;
#  render.chars1.rects;


#  dma.off(u0, dma0);
#  dma.off(u0, dma1);
 };

q @5350;
lines q.lines;
state q.state;
lvec0 q.lvec0;

_ @sys.llog;

dma0 0;
dma1 1;
dma5 5;

llog.begin(u0, S.test.text.multiline);

lines.vec.use(lvec0);

llog.printv(r0, S.r2, r2);
llog.printo(r0, S.r2o, 0, r2,-1);
llog.printo(r0, S.dma5, 0, dma5,-1);

i:=0;
while(i<state.view.rows) {
 lines.vec.select(i, dma0,dma1); 
#  llog.printv(u0, S.select.i, i);
#  llog.printo(r0, S.dma0, 0, dma0,-1);
#  llog.printo(r0, S.dma1, 0, dma1,-1);
 row state.view.rows-i;
# draw(options.info, 0, row*25+row*sin(t*2)*20, row);
 draw(options.info, 0,row*25, state.view.start.row+i);
 
 i+=1;
};

dma.off(u0, dma0);
dma.off(u0, dma1);
lines.vec.end(lvec0);

llog.end(u0);

### 5352:S test.text.multiline.vsh

#define a_position a0
#define a_texCoord a1

attribute vec4 a_position;
attribute vec2 a_texCoord;

varying mediump vec2 v_texCoord;

varying highp vec4 v_position;

uniform vec2 p1;

void main()
{
  vec4 p = a_position + vec4(p1, 0.,0.);
  gl_Position = CC_MVPMatrix * p;
  v_texCoord = a_texCoord;
  v_position = a_position;
}

### 5353:S test.text.multiline.fsh

#define time CC_Time[3]/10.
//#define resolution vec2(500.0,250.)/vec2(1.)
#define mouse vec2(0.5)

#ifdef GL_ES
precision highp float;
#endif

//uniform float time;

//uniform vec2 resolution;

varying vec2 v_texCoord;
uniform sampler2D p0;

uniform float p2;
#define percent p2

//uniform vec2 p1;
//#define resolution p1
//uniform vec2 p2q;
//#define offset p2q

//#define resolution vec2(50.0,70.)/vec2(1.)
#define resolution vec2(250.0,570.)/vec2(1.)
#define offset     vec2(0.,0.)

#define PI 90

varying highp vec4 v_position; 

void main( void ) {

    vec2 pp = gl_FragCoord.xy - offset;

    vec2 p = ( pp / resolution.xy ) - 0.; //nosaka vilnu atrašanas vietu, xy - horizontali vilni, yx - vertikali, 0.0 - centra/viduslinija
    vec2 p2q = ( pp / resolution.xy ) - 0.; //nosaka šautrinu atrašanas vietu, xy - horizontali vilni, yx - vertikali, 0.0 - centra/viduslinija
    
    // pirmais 0.5 - atrašanas vieta: <0.5 - zem viduslinijas, >0.5 - virs
    // otrais 0.5 - vilnu augstums
    // sin(100.0.. - vilnu platums
    // p.x vai p2q.y - nosaka attieciga vektora virzienu/veidu, ja x, tad veidos vilnus, ja y, tad šautrinas
    // sin( 2.0.. - nosaka vilnu amplitudu - jo lielaks skaitlis, jo mazaka amplituda
    // p.x vai p2q.x - nosaka amplitudas virzienu
    // 1. * pow(time, 0.9)*5. - nosaka vilnu atrumu
    float sx = 0.5 + 0.5 * sin( 1000.0 * p.x - 1. * pow(time, 0.5)*2.) * sin( 2.0 * p.x - 1. * pow(time, 0.9)*5.);
    float sx2 = 0.5 + 0.5 * sin( 1000.0 * p2q.y - 1. * pow(time, 0.5)*2.) * sin( 2.0 * p2q.x - 1. * pow(time, 0.9)*5.);
    
    // 1.0 -  nosaka vilna spilgtumu - ja mazaks skaitlis, tad vilnis sastav no punktiniem, ja lielaks, tad saplust linijas
    // 1000. - ari nosaka vilna spilgtumu, ja lielaks skaitlis, tad sastav no punktiem, ja mazaks, tad linijas
    float dy = 1.0/ ( 100. * abs(p.y - sx));
    float dy2 = 1.0/ ( 100. * abs(p2q.y - sx2));
    
    // 2.  - nosaka fona gaišumu, jo lielaks skaitlis, jo gaišas fons
    // p.y vai p2q.y - nosaka no kuras puses spides gaisma, ja y, tad no kreisa stura, ja x, tad no apakšas
    // 0. - nosaka krasu
    dy += 2./ (15. * length(p - vec2(p.y, 2.)));
    dy2 += 2./ (15. * length(p2q - vec2(p2q.y, 2.)));
    
    // p.y vai p2q.y + 0.3- nosaka no kuras puses veidosies krasu maina un kada toni ta bus
    // parejie parametri nosaka krasas spožumu, toni un virzienu
    vec4 pirmais = vec4( (p.y + 0.3) * dy , 0.9 * dy, dy, 1.1 );
    vec4 otrais = vec4( (p2q.y + 0.3) * dy2 , 0.3 * dy2, dy2, 1.1 );
    
    vec4 o = (otrais + pirmais);
    //o = vec4(o.g*5.,o.b*2.,o.r*2.,1.);

    vec2 coord = v_texCoord;
    float dxx = 15.*(1./1./512.);
    float dyy = 10.*(1./1./512.);
//    coord = vec2(dxx*floor(v_texCoord.x/dxx),dyy*floor(v_texCoord.y/dyy)); 

    vec4 c = texture2D(p0, coord);
    if (c.a < 0.9) c.a = 0.;
//    o += vec4(0.3,1.,0.+sin(coord.x*2.),1.)*0.7;
//    o += vec4(0.3+sin(coord.x*20.+time*10.)*0.5,1.,0.,1.)*0.7;
    o += vec4(0.3+sin(coord.x*20.+time*10.)*0.5,0.5+sin((coord.x*10.+time)*10.)*0.4,1.,1.)*0.7;
    o=vec4(2.,0.5,0.0,1)*0.2*exp(o);
    o.b=0.5+cos(o.r/2.*3.14);
    o.g=o.r/2.;
    o = c.a * o;
/*
    o.r = o.r > 0. ? o.r + p2 : 0.;
    o.g /= p2*5.;
    o.b /= p2*5.;
*/
/*    if (v_position.x > 200.) {
      o.r=o.b=o.g;
      o*=vec4(vec3(2.2),1.);
    }
    else*/
      o*=vec4(vec3(0.4,3.,0.3),1.);
//      o*=vec4(vec3(1.5,1.,3.4),1.);
/*
    o.r = o.r > 0. ? p2 : 0.;
    o.g = o.r;
    o.b = 0.;
*/
#define pi 3.14
    o = texture2D(p0, coord);
    o.r = o.g = c.a;
//    o.b = o.g * o.r;
//    o.r = o.r > 0. ? 0.5+0.5*sin(p2*pi) : 0.;
    o.r = o.r > 0. ? p2 : 0.;
    o.g = o.g > 0. ? 1.-o.r*10. : 0.;
//    o.g = o.g > 0. ? 0.5+0.5*sin(p2*pi*8.) : 0.;
//    o.g = 0.;
    o.b = 0.;

    gl_FragColor = o;
}