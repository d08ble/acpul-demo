### 5000 tests

r0:=k==0;

draw(r0, 5001);

y:=300;

_ @1010;
_ @sys.node;

test.storage 5010;
node.new.this.ex(r0, test.storage, 0);

test.media 5050;
l0:=node.new.this.ex(r0, test.media, 0);
node.prop.x.s(r0, l0, 100);

test.lanczos 5030;
l0:=node.new.this.ex(r0, test.lanczos, 0);


k:=1;

### 5001 tests.draw

color(u0, 0.5,0,0.5,1);
rw 100;
rh 100;
rect(u0, 6, 0,0,rw,rh);
color(u0, 0.5,0.6,0.5,0.1);
rect(u0, 6, 5,5,rw-10,rh-10);

### 5010 test.storage

r0:=k==0;

draw(r0, 5011);

_ @1010;
_ @sys.touch;
_ @sys.storage;


test.pool 78945;
handle r6;

# touch [

touch.ev
{
 began {
  r7:=1;
  storage.popup.point(rnd(u0)*500, rnd(u0)*500);
  handle:=storage.image.load.from.photo(test.pool,0, storage.photo.mode.photos);
 };
 moved {
  
 };
 ended {
  r7:=0;
 };
};

q {x 0;y 0;w 32;h 32;};
touch.id r1;
touch.b0 r2;
touch.rect(touch.id, q.x,q.y,q.w,q.h);
_ @sys.touch.ev.process.once;
touch.b0:=1;
while(touch.b0) {touch.ev.process.once(touch.id, touch.b0);};

# touch ]

l0:=storage.get.event(handle);
if (l0==storage.e.photo.loaded) {
 r7:=2;
 tex r5;
 #node.ex.texture.release(u0, tex);
 tex:=storage.image.load.texture(o1,o2,o3);
 watch(tex);
 n1 l14;
 n1:=node.new.this.ex(u0, 5020, tex);
 watch(n1);
};
#watch(r5);

k:=1;

n0 l15;
_ @sys.node;
if (r0) {
 n0:=node.new.this.ex(r0, 7320, 1);
 node.prop.s.s(u0, n0, 0.5);
 node.prop.x.s(u0, n0, 100);
 node.prop.y.s(u0, n0, 100);
 node.prop.r.s(u0, n0, 10);
# node.prop.lt.s(u0, n0, 1);
};
#watch(n0);

### 5011 test.storage.draw

color(u0, 1,1,0,1);
if (r7==1) {
 color(u0, 0,1,0,1);
};
if (r7==2) {
 color(u0, 0,0,1,1);
};
rw 32;
rh 32;
rect(u0, 6, 0,0,rw,rh);

### 5019 test.texture.utils

_ @1010;
_ @sys.obj;

_ @7319;

buffer.new.v2a.rect.d {
 # dma, id, x,y, w,h
 _1:=buffer.new(u0, 2*4, 2*4);
 buffer.dma(u0, _0, _1,0);
 dma.v2a.rect(_0,0, _2,_3, _4,_5);
 dma.off(u0, _0);
};

node.ex.shader.attribute.dma0 
 # attribute, dma,elementsize,count, normalized
 node.ex.shader.attribute.dma(u0, _0, _1,0,_2,0,_3, 0,_4);

node.ex.shader.attribute.buffer.d {
 # dma, attribute, buf,elementsize,count, normalized
 buffer.dma(u0, _0, _2,0);
 node.ex.shader.attribute.dma0(_1, _0,_3,_4, _5);
};

### 5020 test.texture(tex)
r0:=k==0;

draw(r0, 5021);

_ @1010;
_ @sys.obj;
test.texture.utils 5019;
_ @test.texture.utils;

if (r0) {
 texcoords r2;
 verts r3;
 buffer.new.v2a.rect.d(0, texcoords, 0,0, 1,1);
 buffer.new.v2a.rect.d(0, verts, 0,0, 300,300);
 tex r4;
 tex:=p0;
};

k:=1;
r+=dt*10;

### 5021 test.texture(tex).draw

_ @1010;
_ @sys.node;
_ @sys.obj;
test.texture.utils 5019;
_ @test.texture.utils;

texcoords r2;
verts r3;
tex r4;

vsh 5022; fsh 5023;
node.ex.shader.use(u0, vsh, fsh);

node.ex.shader.attribute.buffer.d(0, 0, texcoords,2,4, 0);
node.ex.shader.attribute.buffer.d(1, 1, verts,2,4, 0);

param 0; texUnit 0;
node.ex.shader.uniform.texture(u0, param, tex, texUnit);

node.ex.gl.draw(u0, 6, 4);

dma.off(u0, 0);
dma.off(u0, 1);

#rw 320;
#rh 320;
#rect(u0, 6, 0,0,rw,rh);

### 5022:S test.drawing.texture.0.vsh

#define a_texCoord a0
#define a_position a1
attribute vec4 a_position;
attribute vec2 a_texCoord;

varying vec4 v1;
varying mediump vec2 v2;

void main(void)
{
   gl_Position = CC_MVPMatrix * a_position;
   v1 = a_position;
   v2 = a_texCoord;
}

### 5023:S test.drawing.texture.0.fsh

varying vec4 v1;
varying vec2 v2;

uniform sampler2D p0;

void main(void)
{
//  gl_FragColor = vec4(1.);
//  gl_FragColor = vec4(1.,1.,0.,1.);
// gl_FragColor = vec4(v1.x/1024.*5.);
 gl_FragColor = texture2D(p0, v2);
}

### 5030 test.lanczos.gpui

r0:=k==0;

draw(r0, 5031);

_ @1010;
_ @sys.node;
_ @sys.obj;
#_ @sys.media;

ncount r6;
r6:=500;

if (r0) {
 r7:=buffer.new(u0, 2048*3, 2048*3);
 buffer.dma(u0, 0, r7,0);

 i:=0;
 while (i<ncount) {
  p i*3;
  x i;
  a 1;

  # L(x) Lanczos kernel
#  L {watch(_0);sinc(_0)*sinc(_0/a);};
  L sinc(_0)*sinc(_0/a);

  y L(0.1*(i-ncount/2))*100;

  L if(_0>-a, if(_0<a, sinc(_0)*sinc(_0/a), 0), 0);
  y L((i/ncount)*6-3)*100;

  dma.set2(u0, 0, p, x,y);
  i+=1;
 };
# obj.dump(u0, 0, 0);
};
#x-=1;
s:=1;

k:=1;

#  y sin(i/5)*10;
#  sinc.test sinc(0.1*(i-ncount/2))*100;
#  y sinc.test;

### 5031 test.lanczos.gpui.draw

_ @1010;
_ @sys.node;
_ @sys.obj;

ncount r6;

vsh 5033;
fsh 5034;
node.ex.shader.use(u0, vsh, fsh);
#psize1(1);
buffer.dma(u0, 0, r7,0);
#if (r0) { obj.dump(u0, 0, 0);}
#node.ex.shader.attribute.dma(u0, attr, pdma,offset,elementsize,stride,count, type,normalized);
node.ex.shader.attribute.dma(u0, 0, 0,0,3,0,ncount, 0,0);
node.ex.gl.draw(u0, 3, ncount);

### 5032 test.lanczos.strings

### 5033:S test.lanczos.filter.vsh

#define a_position a0
attribute vec4 a_position;

varying vec4 v1;

void main(void)
{
  gl_Position = CC_MVPMatrix * a_position;
  v1 = a_position;
}

### 5034:S test.lanczos.filter.fsh

varying vec4 v1;

void main(void)
{
  gl_FragColor = vec4(1.,1.,v1.x/100.,1.);
}

### 5060 test.network

r0:=k==0;

_ @1010;
_ @sys.event;

if (r0) {
 net.scan.local.server();
};

k:=1;

### 5061 test.network.draw

