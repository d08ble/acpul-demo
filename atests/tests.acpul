### 5000 tests
# 5000-6000

r0:=k==0;

draw(r0, 5001);

y:=300;

_ @1010;
_ @sys.node;

test.storage 5010;
#node.new.this.ex(r0, test.storage, 0);

test.media 5050;
#l0:=node.new.this.ex(r0, test.media, 0);
#node.prop.x.s(r0, l0, 100);

test.lanczos 5030;
#l0:=node.new.this.ex(r0, test.lanczos, 0);

test.network 5060;
#l0:=node.new.this.ex(r0, test.network, 0);

test.gl.draw.elements 5070;
#l0:=node.new.this.ex(r0, test.gl.draw.elements, 0);

test.grid.elements 5080;
#l0:=node.new.this.ex(r0, test.grid.elements, 0);

test.shapeop 5090;
l0:=node.new.this.ex(r0, test.shapeop, 0);


k:=1;

### 5001 tests.draw

color(u0, 0.5,0,0.5,1);
rw 100;
rh 100;
rect(u0, 6, 0,0,rw,rh);
color(u0, 0.5,0.6,0.5,0.1);
rect(u0, 6, 5,5,rw-10,rh-10);

### 5060 test.network
 
r0:=k==0;

_ @1010;
_ @sys.net;
_ @sys.events;
_ @sys.obj;

if (r0) {
# net.scan.off();
 net.scan.local.server();
};
eid l0;
nid l1;
eid:=events.pop(u0, net.e.pool,0);
nid:=o0;
if (eid==net.e.node.found) {
 nprop l2;
 nprop:=net.node.props(nid);
 watch(nprop);
 obj.dump(u0, 0, nprop);

 # type;name;ports;ips
 l3:=111;
 watch(l3);
 watch(eid);
 watch(nid);
};
if (eid==net.e.node.lost) {
 watch(eid);
 watch(nid);
};

k:=1;

### 5061 test.network.draw

color(u0, 1,1,1,1);
rect(u0, 6, 0,0,222,222);

### 5080 test.grid.elements

r0:=k==0;

draw(r0, 5081);

_ @1010;
_ @sys.obj;

create.grid {
 r7:=buffer.new(u0, 1000, 100000);
 r6:=buffer.new(u0, 1000, 100000);
 buffer.dma(u0, 0, r7,0);
 buffer.dma(u0, 1, r6,0);
 w 10;
 h 10+1;
 x l1;
 y l2;
 fill.points {
  y:=0;
  while(y<h) {
   x:=0;
   while(x<w) {
    p 2*(x+y*w);
    dma.set2(u0, 0,p+0, x*5,y*5);
    x+=1;
   };
   y+=1;
  };
 };
 fill.points;
 fill.indices {
  p l3;
  p:=0;
  y:=0;
  while(y<h-1) {
   x:=0;
   while(x<w-1) {
#    p 3*2*(x+y*w);
    j y*w;
    dma.set4(u0, 1,p+0, x+0+j,x+1+j,x+w+j, 0);
    dma.set4(u0, 1,p+3, x+1+j,x+w+j,x+w+j+1, 0);
    p+=6;
    x+=1;
   };
   y+=1;
   r5:=p;
  };
 };
 fill.indices;
 count.points r4;
 count.indices r5;
 r4:=w*h;
 
# obj.dump(u0, 0, r7);
# obj.dump(u0, 0, r6);
 dma.off(u0, 0);
 dma.off(u0, 1);
};

if (r0) {create.grid;};

k:=1;

t+=dt;

### 5081 test.grid.elements.draw

_ @1010;
_ @sys.node;
_ @sys.obj;

count.points r4;
count.indices r5;
buffer.dma(u0, 0, r7,0);
buffer.dma(u0, 1, r6,0);
#watch();
vsh 5082;
fsh 5083;
node.ex.shader.use(u0, vsh, fsh);
#obj.dump(u0, 0, r7);
# r0, i, dma,o,esize,stride,count, type,normalized
node.ex.shader.attribute.dma(u0, 0, 0,0,2,0,count.points, 0,0);
# r0, dma, count -> ibuf::object
l0:=node.ex.shader.indices.dma(u0, 1, count.indices);
# r0, type, ibuf
node.ex.gl.draw.elements(u0, 3, l0);
obj.delete(u0, l0);
dma.off(u0, 0);
dma.off(u0, 1);

### 5082:S test.grid.elements.vsh

#define a_position a0
attribute vec4 a_position;
varying vec4 v0;
void main(void)
{
  gl_Position = CC_MVPMatrix * a_position;
  v0 = gl_Position;
}

### 5083:S test.grid.elements.fsh

varying vec4 v0;
void main(void)
{
  gl_FragColor = vec4(0.+v0.x,0.5+v0.y,0.5,0.5);
}

### 5090 test.shapeop

r0:=k==0;

draw(r0, 5081);

_ @1010;
_ @sys.geom;
_ @sys.obj;

tge @5080;

if (r0) {
 tge.create.grid;
# r7
 buffer.dma(u0, 0, r7,0);
 sop r8;
 sop:=geom.shapeop.new.solver(u0);
 geom.shapeop.set.points(u0, sop, 0, 2);
 geom.shapeop.add.closeness(u0, sop, 0, 1);
 geom.shapeop.add.closeness(u0, sop, 1, 1);
 l0:=0;while(l0<50){l0+=1; 
  geom.shapeop.add.closeness(u0, sop, l0, 1);
 };

 geom.shapeop.init(u0, sop, 0,1,1,1); 
 geom.shapeop.solve(u0, sop, 10);

 r9:=buffer.new(u0, 1000, 100000);
 buffer.dma(u0, 1, r9,0);
 geom.shapeop.get.points(u0, sop, 1);
 #dma.off(u0, 0);
 obj.dump(u0, 0, 1);

 dma.off(u0, 0);
};

k:=1;

### 5091 test.shapeop.draw

### 5100 test.bullet.physics

r0:=k==0;

k:=1;

### 5101 test.bullet.physics.draw
