### 5000 tests
# 5000-6000

r0:=k==0;

draw(r0, 5001);

y:=300;

_ @1010;
_ @sys.node;

test.storage 5010;
#node.new.this.ex(r0, test.storage, 0);

test.media 5050;
#l0:=node.new.this.ex(r0, test.media, 0);
#node.prop.x.s(r0, l0, 100);

test.lanczos 5030;
#l0:=node.new.this.ex(r0, test.lanczos, 0);

test.network 5060;
#l0:=node.new.this.ex(r0, test.network, 0);

test.gl.draw.elements 5070;
#l0:=node.new.this.ex(r0, test.gl.draw.elements, 0);

test.grid.elements 5080;
l0:=node.new.this.ex(r0, test.grid.elements, 0);

k:=1;

### 5001 tests.draw

color(u0, 0.5,0,0.5,1);
rw 100;
rh 100;
rect(u0, 6, 0,0,rw,rh);
color(u0, 0.5,0.6,0.5,0.1);
rect(u0, 6, 5,5,rw-10,rh-10);

### 5030 test.lanczos.gpui

r0:=k==0;

draw(r0, 5031);

_ @1010;
_ @sys.node;
_ @sys.obj;
#_ @sys.media;

ncount r6;
r6:=500;

if (r0) {
 r7:=buffer.new(u0, 2048*3, 2048*3);
 buffer.dma(u0, 0, r7,0);
 i:=0;
 while (i<ncount) {
  p i*3;
  x i;
  a 1;

  # L(x) Lanczos kernel
#  L {watch(_0);sinc(_0)*sinc(_0/a);};
  L sinc(_0)*sinc(_0/a);

  y L(0.1*(i-ncount/2))*100;

  L if(_0>-a, if(_0<a, sinc(_0)*sinc(_0/a), 0), 0);
  y L((i/ncount)*6-3)*100;

  dma.set2(u0, 0, p, x,y);
  dma.set(u0, 0, p+2, 0);
  i+=1;
 };
# obj.dump(u0, 0, 0);
};
#x-=1;
s:=1;

k:=1;

#  y sin(i/5)*10;
#  sinc.test sinc(0.1*(i-ncount/2))*100;
#  y sinc.test;

### 5031 test.lanczos.gpui.draw

_ @1010;
_ @sys.node;
_ @sys.obj;

ncount r6;

vsh 5033;
fsh 5034;
node.ex.shader.use(u0, vsh, fsh);
#psize1(1);
buffer.dma(u0, 0, r7,0);
#if (r0) { obj.dump(u0, 0, 0);}
#node.ex.shader.attribute.dma(u0, attr, pdma,offset,elementsize,stride,count, type,normalized);
node.ex.shader.attribute.dma(u0, 0, 0,0,3,0,ncount, 0,0);
node.ex.gl.draw(u0, 3, ncount);

### 5032 test.lanczos.strings

### 5033:S test.lanczos.filter.vsh

#define a_position a0
attribute vec4 a_position;

varying vec4 v1;

void main(void)
{
  gl_Position = CC_MVPMatrix * a_position;
  v1 = a_position;
}

### 5034:S test.lanczos.filter.fsh

varying vec4 v1;

void main(void)
{
  gl_FragColor = vec4(1.,1.,v1.x/100.,1.);
}

### 5060 test.network
 
r0:=k==0;

_ @1010;
_ @sys.net;
_ @sys.events;
_ @sys.obj;

if (r0) {
# net.scan.off();
 net.scan.local.server();
};
eid l0;
nid l1;
eid:=events.pop(u0, net.e.pool,0);
nid:=o0;
if (eid==net.e.node.found) {
 nprop l2;
 nprop:=net.node.props(nid);
 watch(nprop);
 obj.dump(u0, 0, nprop);

 # type;name;ports;ips
 l3:=111;
 watch(l3);
 watch(eid);
 watch(nid);
};
if (eid==net.e.node.lost) {
 watch(eid);
 watch(nid);
};

k:=1;

### 5061 test.network.draw

color(u0, 1,1,1,1);
rect(u0, 6, 0,0,222,222);

### 5070 test.gl.draw.elements

r0:=k==0;

draw(r0, 5071);

_ @1010;
_ @sys.obj;

if (r0) {
 r7:=buffer.new(u0, 100, 100);
 r6:=buffer.new(u0, 100, 100);
 buffer.dma(u0, 0, r7,0);
 buffer.dma(u0, 1, r6,0);
 dma.set4(u0, 0,0, 0,0, 200,0);
 dma.set2(u0, 0,4, 200,200);
 dma.set4(u0, 0,6, 300,0, 400,0);
 dma.set2(u0, 0,10, 350,70);
 
 dma.set4(u0, 1,0, 0,1,2, 0);
 dma.set4(u0, 1,3, 3,4,5, 0);
 
 obj.dump(u0, 0, r7);
 obj.dump(u0, 0, r6);
 dma.off(u0, 0);
 dma.off(u0, 1);
};

k:=1;

t+=dt;

buffer.dma(u0, 0, r7,0);
dma.set2(u0, 0,10, 350+100*sin(t),70);
dma.off(u0, 0);

### 5071 test.gl.draw.elements.draw

_ @1010;
_ @sys.node;
_ @sys.obj;

buffer.dma(u0, 0, r7,0);
buffer.dma(u0, 1, r6,0);
vsh 5072;
fsh 5073;
node.ex.shader.use(u0, vsh, fsh);
#obj.dump(u0, 0, r7);
# r0, i, dma,o,esize,stride,count, type,normalized
node.ex.shader.attribute.dma(u0, 0, 0,0,2,0,6, 0,0);
# r0, dma, count -> ibuf::object
l0:=node.ex.shader.indices.dma(u0, 1, 6);
# r0, type, ibuf
node.ex.gl.draw.elements(u0, 4, l0);
obj.delete(u0, l0);
dma.off(u0, 0);
dma.off(u0, 1);

### 5072:S test.gl.draw.elements.vsh

#define a_position a0
attribute vec4 a_position;
varying vec4 v0;
void main(void)
{
  gl_Position = CC_MVPMatrix * a_position;
  v0 = gl_Position;
}

### 5073:S test.gl.draw.elements.fsh

varying vec4 v0;
void main(void)
{
  gl_FragColor = vec4(0.5+v0.x,0.5+v0.y,0.5,0.5);
}

### 5080 test.grid.elements

r0:=k==0;

draw(r0, 5081);

_ @1010;
_ @sys.obj;

if (r0) {
 r7:=buffer.new(u0, 1000, 1000);
 r6:=buffer.new(u0, 1000, 1000);
 buffer.dma(u0, 0, r7,0);
 buffer.dma(u0, 1, r6,0);
 w 81;
 h 4+1;
 x l1;
 y l2;
 fill.points {
  y:=0;
  while(y<h) {
   x:=0;
   while(x<w) {
    p 2*(x+y*w);
    dma.set2(u0, 0,p+0, x*10,y*10);
    x+=1;
   };
   y+=1;
  };
 };
 fill.points;
 fill.indices {
  y:=0;
  while(y<h) {
   x:=0;
   while(x<w-1) {
    p 3*(x*2+y*w);
    j y*w;
    dma.set4(u0, 1,p+0, x+0+j,x+1+j,x+w+j, 0);
    dma.set4(u0, 1,p+3, x+1+j,x+w+j,x+w+j+1, 0);
    x+=1;
   };
   y+=1;
  };
 };
 fill.indices;
 count.points r4;
 count.indices r5;
 r4:=w*h;
 r5:=6*5*3; #3*10;#(w-1)*h;# 6*2;
 r5:=w*(h-1)*3;
# dma.set4(u0, 0,0, 0,0, 200,0);
# dma.set2(u0, 0,4, 200,200);
# dma.set4(u0, 0,6, 300,0, 400,0);
# dma.set2(u0, 0,10, 350,70);
 
# dma.set4(u0, 1,0, 0,1,2, 0);
# dma.set4(u0, 1,3, 3,4,5, 0);
 
 obj.dump(u0, 0, r7);
 obj.dump(u0, 0, r6);
 dma.off(u0, 0);
 dma.off(u0, 1);
};

k:=1;

t+=dt;

### 5081 test.grid.elements.draw

_ @1010;
_ @sys.node;
_ @sys.obj;

count.points r4;
count.indices r5;
buffer.dma(u0, 0, r7,0);
buffer.dma(u0, 1, r6,0);
vsh 5082;
fsh 5083;
node.ex.shader.use(u0, vsh, fsh);
#obj.dump(u0, 0, r7);
# r0, i, dma,o,esize,stride,count, type,normalized
node.ex.shader.attribute.dma(u0, 0, 0,0,2,0,count.points, 0,0);
# r0, dma, count -> ibuf::object
l0:=node.ex.shader.indices.dma(u0, 1, count.indices);
# r0, type, ibuf
node.ex.gl.draw.elements(u0, 3, l0);
obj.delete(u0, l0);
dma.off(u0, 0);
dma.off(u0, 1);

### 5082:S test.grid.elements.vsh

#define a_position a0
attribute vec4 a_position;
varying vec4 v0;
void main(void)
{
  gl_Position = CC_MVPMatrix * a_position;
  v0 = gl_Position;
}

### 5083:S test.grid.elements.fsh

varying vec4 v0;
void main(void)
{
  gl_FragColor = vec4(0.+v0.x,0.5+v0.y,0.5,0.5);
}
