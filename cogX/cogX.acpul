### 6000 cogX.main

r0:=k==0;

draw(r0, 6001);

s:=0.5;
#x:=-90;

_ @1010;
_ @sys.node;

eq.icon 6002;
node.new.this.ex(r0, eq.icon, 0);

k:=1;

### 6001 cogX.main.draw

color(u0, 1,1,0,0.5);
rect(u0, 6, 0,0,777,777);

### 6002 cogX.eq.icon

r0:=k==0;

draw(r0, 6003);

k:=1;

### 6003 cogX.eq.icon.draw

color(u0, 1,0,1,1);
rect(u0, 6, 0,0,500,500);

_ @1010;
_ @sys.node;
_ @sys.display;
node.ex.shader.use(u0, 6004, 6006);
w 500;
h 500;
node.ex.shader.uniform.f2(u0, 0, w,h);
node.ex.gl.rect(u0, 0,0, w,h);


### 6004:S cogX.eq.icon.vsh

attribute vec4 a_position;
attribute vec2 a_texCoord;

varying mediump vec2 v_texCoord;

void main()
{
  gl_Position = CC_MVPMatrix * a_position;
    v_texCoord = a_texCoord;
}

### 6005:S cogX.eq.icon.fsh

#define time 1.
//#define time CC_Time[3]
#define resolution vec2(200.0)
#define mouse vec2(0.5)

#ifdef GL_ES
precision highp float;
#endif

varying vec2 v_texCoord;

void main( void ) {
    vec2 position = -0.25+v_texCoord*0.5;// (gl_FragCoord.xy/resolution.xy) - 0.5 ;
    float y = 0.2 * position.y * sin(300.0 * position.y - 20.0 * time *0.01);
    y = 1. / (600. * abs(position.x - y));
    
    y += 1./length(665.*length(position - vec2(0., position.y)));
    
    float lpy = (mod(time/2., 1.)-0.5)*2.;
    float saule = 1./length(65.*length(position - vec2(0, lpy)));
    
    vec4 vsaule = vec4(saule*5., saule, saule*5., 0.0);
    vec4 vstari = vec4(position.y*0.5 - y, y, y*5., 0.0);

    gl_FragColor = mix(vsaule, vstari, abs(sin(time)));
}

### 6006:S cogX.eq.icon-eq1.fsh

#define time 2.
##define time CC_Time[3]
//#define resolution vec2(500.0,250.)/vec2(1.)
#define mouse vec2(0.5)

#ifdef GL_ES
precision mediump float;
#endif

//uniform float time;

//uniform vec2 resolution;
uniform vec2 p0;
#define resolution po

#define PI 90

void main( void ) {

    
    vec2 p = ( gl_FragCoord.xy / resolution.xy ) - 0.0; //nosaka vilnu atrašanas vietu, xy - horizontali vilni, yx - vertikali, 0.0 - centra/viduslinija
    vec2 p2 = ( gl_FragCoord.xy / resolution.xy ) - 0.0; //nosaka šautrinu atrašanas vietu, xy - horizontali vilni, yx - vertikali, 0.0 - centra/viduslinija
    
    // pirmais 0.5 - atrašanas vieta: <0.5 - zem viduslinijas, >0.5 - virs
    // otrais 0.5 - vilnu augstums
    // sin(100.0.. - vilnu platums
    // p.x vai p2.y - nosaka attieciga vektora virzienu/veidu, ja x, tad veidos vilnus, ja y, tad šautrinas
    // sin( 2.0.. - nosaka vilnu amplitudu - jo lielaks skaitlis, jo mazaka amplituda
    // p.x vai p2.x - nosaka amplitudas virzienu
    // 1. * pow(time, 0.9)*5. - nosaka vilnu atrumu
    float sx = 0.5 + 0.5 * sin( 100.0 * p.x - 1. * pow(time, 0.5)*2.) * sin( 2.0 * p.x - 1. * pow(time, 0.9)*5.);
    float sx2 = 0.5 + 0.5 * sin( 100.0 * p2.y - 1. * pow(time, 0.5)*2.) * sin( 2.0 * p2.x - 1. * pow(time, 0.9)*5.);
    
    // 1.0 -  nosaka vilna spilgtumu - ja mazaks skaitlis, tad vilnis sastav no punktiniem, ja lielaks, tad saplust linijas
    // 1000. - ari nosaka vilna spilgtumu, ja lielaks skaitlis, tad sastav no punktiem, ja mazaks, tad linijas
    float dy = 1.0/ ( 100. * abs(p.y - sx));
    float dy2 = 1.0/ ( 700. * abs(p2.y - sx2));
    
    // 2.  - nosaka fona gaišumu, jo lielaks skaitlis, jo gaišas fons
    // p.y vai p2.y - nosaka no kuras puses spides gaisma, ja y, tad no kreisa stura, ja x, tad no apakšas
    // 0. - nosaka krasu
    dy += 2./ (15. * length(p - vec2(p.y, 2.)));
    dy2 += 2./ (15. * length(p2 - vec2(p2.y, 0.)));
    
    // p.y vai p2.y + 0.3- nosaka no kuras puses veidosies krasu maina un kada toni ta bus
    // parejie parametri nosaka krasas spožumu, toni un virzienu
    vec4 pirmais = vec4( (p.y + 0.3) * dy , 0.9 * dy, dy, 1.1 );
    vec4 otrais = vec4( (p2.y + 0.3) * dy2 , 0.3 * dy2, dy2, 1.1 );
    
    vec4 o = (otrais + pirmais);
    o = vec4(o.g*2.,o.b,o.r,1.);
    gl_FragColor = o;
}
