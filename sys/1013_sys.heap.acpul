### 1013 sys.heap
heap.a.a 50000;
heap.a.stack a+1;
heap.a.pool a+2;
heap.pool.size 10000-1;
heap.ptr u19;
heap.b0 u31; #temporrary
heap.b1 u30; #temporrary

heap
{
 _;
 stack.a a.stack+1;
 stack.size 10000;
 stack.head u17;
 stack.m u18;
 _ @sys.stack.base;

 frees stack.base;
 frees.push
 {
  head stack.head;
  m stack.m;
  not.found 0-1;
  find
  {
   b0:=0;
   b1:=not.found;
   while(b0<head)
   {
    if(get(u0, m, b0)==_0)
    {
     b1:=b0;
     b0:=head;
    };
    b0+=1;
   };
   b1;
  };
#  is.once b0:=find(_0)==0;
  if(find(_0)==not.found)
  {
   stack.base.push(_0);
  };
 };

 start
 {
  frees.start;
 };
 check
 {
#  throw if error
  watch(ptr);
 };
 alloc
 # var, size
 {
  if(frees.empty)
  {
   check(ptr);
   b0:=a.pool+ptr;
   ptr+=1;
  };
  if(frees.empty==0)
  {
   frees.pop(b0);
  };
  _0:=mem(u0, 0, b0, _1);
 };
 free
 {
  mem(u0, 0, _0, 0);
  frees.push(_0);
 };
};
heap
{
 _;
 alloc0
 # e, var, size
  if (_0) {alloc(_1,_2);};
};

#heap.start;
#watch(heap.stack.head);
#heap.frees.push(2);
#heap.frees.push(3);

#heap.alloc(l2, 1024);
#heap.free(l2);
#watch(heap.stack.head);
#watch(heap.frees.empty);
#watch(u17);
#watch(l2);
#heap.stack.a;
#heap.frees.a;
#heap.frees.push(1);

#watch(u16);
#watch(heap.a.a);

#l10:=heap.alloc(1000);
#watch(l10);
