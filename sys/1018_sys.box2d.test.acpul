### 1018 sys.box2d.test
#
# BOX2D TEST
#

box2d.test
{
 # RESET

 box2d.reset(u0);

 # CREATE WORLD
 world o0;
 gravity.x 0;
 gravity.y 0-9.8; #earth 9.8 m/s/s

 world:=box2d.world(u0, gravity.x, gravity.y);

 # STEP
 dt 0.1;
 velocity.iteractions 8;
 position.iteractions 3;

 box2d.step(u0, world, dt, velocity.iteractions, position.iteractions);

 # COLLISION RULE
 collision.groups
 {
  friend 1;
  friend.fire 2;
  enemy 3;
  enemy.fire 4;
 };
 cgs collision.groups;
 cgr collision.group.rule(u0, _0, _1, _2, _3);

 cgr(world, cgs.friend.fire, cgs.enemy, 1);
 cgr(world, cgs.enemy.fire, cgs.friend, 1);
 cgr(world, cgs.enemy, cgs.friend, 1);

 # Body: Comment example
 # ---
 # You don't need more breakedown for compiler,
 # any text in any rule can be writed (like in
 # your file system).
 # ACPUL - The Language with minimal 
 # syntax discovery.
 # Give your hands free, more time for
 # brainstorm & ideas.
 # ---
 # Here is Body of Box2d component.
 # For collision testing we 
 # requierd 4 groups bodies:
 # enemy, friend, enemy fire, friend fire
 # The Body can created using full descrition
 # or short descrition (below in samples).
 #
 # Learn: box2d, sys.box2d, box2d.body,
 # /box2d.org/, etc... (like link?)
 #
 # The two ACPUL comments rule:
 # 1. Don't write many comments, coments should
 # be not much, but with full description. 
 # The best comment - no comment or 
 # short in header location.
 # 2. Code must be documented by self in near
 # code coordinate system & logic range & scope 
 # (what you see, handfree scroll). 
 # You have more time for code documentation, 
 # think twice, please.
 #
 # Error procesing - don't write errors.

 # BODY FULL
 # def0
 type box2d.dynamic;
 position.x 100;
 position.y 200;
 angle 35;
 # def1
 velocity.linear.x 1;
 velocity.linear.y 2;
 velocity.angular 3;
 # def2
 damping.linear 1;
 damping.angular 2;
 allow.sleep 3;
 awake 4;
 # def3
 fixed.rotation 0;
 bullet 1;
 active 2;
 gravity.scale 3;

# body.def.type.position.angle(u0, 0,1,2,3);
 n:=234;

 box2d.body.def0(u0, type, position.x, position.y, angle);
 _ velocity;
 box2d.body.def1(u0, linear.x, linear.y, angular);
 _ damping;
 box2d.body.def2(u0, linear, angular, allow.sleep, awake);
 box2d.body.def3(u0, fixed.rotation, bullet, active, gravity.scale);

 body0 o1;
 body0:=box2d.body.create(u0, world);

 # BODY SHORT
 body1 o2;
 body.new
 {
   box2d.body.def0(u0, _0, _1, _2, _3);
   box2d.body.create(u0, world);
 };
 body1:=body.new(box2d.kinematic, 200, 320, 90);
 
 # BODY GROUP
 box2d.body.group.add(u0, body0, cgs.friend);
 box2d.body.group.add(u0, body1, cgs.enemy.fire);

 box2d.body.group.remove(u0, body1, cgs.enemy.fire);
 box2d.body.group.add(u0, body1, cgs.enemy);

 # BODY DATA
#!old box2d.body.data.values4(u0, 1, 2, 3, 4);
#!old box2d.body.data.set(u0, body0, 0);
#!old box2d.body.data.values4(u0, 5, 6, 7, 8);
#!old box2d.body.data.set(u0, body1, 1);

 n:=box2d.body.data.get(u0, body0, 0);
# watch(n);
 n:=box2d.body.data.get(u0, body1, 3);
# watch(n);

 # SHAPE
 shape0 o3;
 shape1 o4;

 shape0:=box2d.shape.create.polygon(u0);
 shape1:=box2d.shape.create.circle(u0);

 box2d.shape.polygon.box(u0, shape0, 20, 1);
 box2d.shape.set.radius(u0, shape1, 10);

 # FIXTURE
 fixture0 o5;
 fixture1 o6;

 n:=876;
 fixture.def(u0, 0.2, 0, 0, 0);
 fixture0:=fixture.create(u0, body0, shape0);
 fixture1:=fixture.create(u0, body1, shape1);
 # COLLISION DETECTION

};

#Yes, this better, than JSON :)
